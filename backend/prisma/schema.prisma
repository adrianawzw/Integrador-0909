generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======================
// USUARIO
// ======================
model Usuario {
  id_usuario  Int      @id @default(autoincrement())
  correo      String   @unique
  password    String
  rol         String   // admin, docente, estudiante

  docentes    Docente[]
  estudiantes Estudiante[]

  @@map("usuarios")
}

// ======================
// ESTUDIANTE
// ======================
model Estudiante {
  id_estudiante Int      @id @default(autoincrement())
  codigo        String   @unique
  dni           String   @unique
  nombre        String
  apellido      String
  id_usuario    Int
  id_seccion    Int?

  usuario       Usuario  @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
  seccion       Seccion? @relation(fields: [id_seccion], references: [id_seccion], onDelete: SetNull)
  entregas      Entrega[]

  @@map("estudiantes")
}

// ======================
// DOCENTE
// ======================
model Docente {
  id_docente          Int      @id @default(autoincrement())
  codigo              String   @unique
  dni                 String   @unique
  nombre              String
  apellido            String
  id_usuario          Int

  usuario             Usuario  @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
  actividades         Actividad[]
  notificaciones      Notificacion[]
  retroalimentaciones Retroalimentacion[]

  @@map("docentes")
}

// ======================
// SECCION
// ======================
model Seccion {
  id_seccion  Int      @id @default(autoincrement())
  nombre      String

  estudiantes Estudiante[]
  grupos      Grupo[]
  actividades Actividad[]

  @@map("secciones")
}

// ======================
// GRUPO
// ======================
model Grupo {
  id_grupo   Int     @id @default(autoincrement())
  nombre     String
  id_seccion Int
  seccion    Seccion @relation(fields: [id_seccion], references: [id_seccion], onDelete: Cascade)
  foro       Foro?   @relation("GrupoForo")

  @@map("grupos")
}

// ======================
// FORO
// ======================
model Foro {
  id_foro    Int     @id @default(autoincrement())
  id_grupo   Int     @unique
  tema       String
  descripcion String?

  grupo      Grupo   @relation("GrupoForo", fields: [id_grupo], references: [id_grupo], onDelete: Cascade)

  @@map("foros")
}

// ======================
// ACTIVIDAD
// ======================
model Actividad {
  id_actividad  Int      @id @default(autoincrement())
  titulo        String
  descripcion   String?
  tipo          String?
  fecha_inicio  DateTime?
  fecha_fin     DateTime?
  estado        String?
  fecha_entrega DateTime?
  
  curso         String?
  id_docente    Int
  id_seccion    Int?

  docente       Docente  @relation(fields: [id_docente], references: [id_docente], onDelete: Cascade)
  seccion       Seccion? @relation(fields: [id_seccion], references: [id_seccion], onDelete: SetNull)
  entregas      Entrega[]
  notificaciones Notificacion[]
  retroalimentaciones Retroalimentacion[]

  @@map("actividades")
}

// ======================
// ENTREGA
// ======================
model Entrega {
  id_entrega    Int      @id @default(autoincrement())
  archivo       String?
  fecha_entrega DateTime?
  id_actividad  Int
  id_estudiante Int

  actividad     Actividad  @relation(fields: [id_actividad], references: [id_actividad], onDelete: Cascade)
  estudiante    Estudiante @relation(fields: [id_estudiante], references: [id_estudiante], onDelete: Cascade)
  retroalimentacion Retroalimentacion? @relation("EntregaRetro")
  notificacion  Notificacion? @relation("EntregaNotif")

  @@map("entregas")
}

// ======================
// RETROALIMENTACION - ✅ CAMBIADO
// ======================
model Retroalimentacion {
  id_retroalimentacion Int      @id @default(autoincrement())
  comentario           String
  calificacion         Float?
  fecha                DateTime @default(now())
  id_actividad         Int
  id_docente           Int
  id_entrega           Int?     @unique

  actividad            Actividad @relation(fields: [id_actividad], references: [id_actividad], onDelete: Cascade)
  docente              Docente   @relation(fields: [id_docente], references: [id_docente], onDelete: Cascade)
  entrega              Entrega?  @relation("EntregaRetro", fields: [id_entrega], references: [id_entrega], onDelete: Cascade)

  @@map("retroalimentaciones")
}

// ======================
// NOTIFICACION - ✅ CAMBIADO
// ======================
model Notificacion {
  id_notificacion  Int      @id @default(autoincrement())
  mensaje          String
  fecha_envio      DateTime @default(now())
  tipo             String?
  id_actividad     Int?
  id_docente       Int?
  id_entrega       Int?     @unique

  actividad        Actividad? @relation(fields: [id_actividad], references: [id_actividad], onDelete: Cascade)
  docente          Docente?   @relation(fields: [id_docente], references: [id_docente], onDelete: Cascade)
  entrega          Entrega?   @relation("EntregaNotif", fields: [id_entrega], references: [id_entrega], onDelete: Cascade)

  @@map("notificaciones")
}